#!/usr/bin/perl -w

use strict;
use IO::Uncompress::Gunzip;
use File::Temp qw{tempdir tempfile};

my ( $filename, $html_name ) = @ARGV;

my $gz = new IO::Uncompress::Gunzip $filename or die;

my $last_ms = 0;

my $time = 0;
my $last_packet_sent = 0;
my $capacity_sum = 0;
my $used_sum = 0;
my @pts;
my $badstats = 0;

EVENT: while ( <$gz> ) {
  chomp;

  my ( $direction, $ms, $event, $field1, $field2 ) = split /\s+/, $_;
  die "Bad direction $direction" unless $direction eq "downlink";
  die "Bad event $event" unless $event eq "underflow" or $event eq "delivery";

  die "nonmonotonic timestamps" unless $ms >= $last_ms;
  $last_ms = $ms;

  if ( $event eq "delivery" ) {
    my $bits = $field2 * 8;
    $used_sum += $bits;
    $capacity_sum += $bits;
  } elsif ( $event eq "underflow" ) {
    my $bits = $field1 * 8;
    $capacity_sum += $bits;
    next EVENT;
  }

  my $ms_old = $field1;

  while ( $time < $ms ) {
    my $age = $time - $last_packet_sent;
    my $secs = $time * 1.e-3;
    push @pts, $age;
    $time++;
  }

  my $new_last_packet_sent = $ms - $ms_old;
#  die unless ( $new_last_packet_sent >= $last_packet_sent - 50 );
  # rounding can screw this up a little
  if ( $new_last_packet_sent > $last_packet_sent )
  {
    $last_packet_sent = $new_last_packet_sent
  } elsif ( $last_packet_sent - $new_last_packet_sent > 10 ) {
    my $newbad = $last_packet_sent - $new_last_packet_sent;
    if ( $newbad > $badstats ) { $badstats = $newbad; }
  }
}

my $standard_trace = 710429360;

@pts = sort { $b <=> $a } @pts;
my $ninefive = $pts[ 0.05 * scalar @pts ];
my $avg_throughput = 1.e-3 * $used_sum / $last_packet_sent;
my $avg_capacity = 1.e-3 * $capacity_sum / $last_packet_sent;

my $temp_filename = rand() . '-' . $$ . '-' . $html_name;
open TEMP, ">", $temp_filename or die "$!";

if ( $badstats ) {
  print TEMP "<strong>Warning: scheduling jitter of $badstats ms observed. Did you remember to run <code>./update-git-repos</code>?</strong><br>\n";
}

print TEMP "<table>";
printf TEMP "<tr><td>log(throughput/delay) score:</td><td></td><td><strong>%0.2f</strong></td></tr>\n", log( $avg_throughput / $ninefive );

if ( $capacity_sum >= $standard_trace * 0.99 and $capacity_sum <= $standard_trace * 1.01 ) {
  printf TEMP qq{<tr><td><a href="http://6829.keithw.org/ps2report/?skype-1363038303-eejahcei">Skype's score:</a></td><td></td><td>%0.2f</td></tr>\n}, -7.20;
  printf TEMP qq{<tr><td><a href="http://6829.keithw.org/ps2report/?sprout-1363685215-aeviphah">Sprout's score:</a></td><td></td><td>%0.2f</td></tr>\n}, -3.45;
  printf TEMP qq{<tr><td><a href="http://6829.keithw.org/ps2report/?anirudh-1363631382-cheighea">Best possible score:</a></td><td></td><td>%0.2f</td></tr>\n}, -2.31;
}

print TEMP "<tr><td colspan=3><hr></td></tr>\n";

print TEMP "<tr><td>Delay (95th percentile):</td><td> </td><td><b>$ninefive ms</b></td></tr>\n";

printf TEMP "<tr><td>Protocol throughput:</td><td></td><td><b>%0.2f Mbps</b></td></tr>\n", $avg_throughput;
print TEMP "<tr><td colspan=3><hr></td></tr>\n";
printf TEMP "<tr><td>Network capacity:</td><td></td><td>%0.2f Mbps</td></tr>\n", $avg_capacity;
printf TEMP "<tr><td>Utilization:</td><td></td><td>%0.1f%%</td></tr>\n", 100 * $avg_throughput / $avg_capacity;

print TEMP "</table>\n";

close TEMP or die "$!";

rename( $temp_filename, $html_name ) or die "$!";
